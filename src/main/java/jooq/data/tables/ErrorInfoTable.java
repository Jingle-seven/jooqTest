/**
 * This class is generated by jOOQ
 */
package jooq.data.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.data.CloudinsApm;
import jooq.data.Keys;
import jooq.data.tables.records.ErrorInfoRecord;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ErrorInfoTable extends TableImpl<ErrorInfoRecord> {

    private static final long serialVersionUID = 1136775812;

    /**
     * The reference instance of <code>cloudins_apm.error_info</code>
     */
    public static final ErrorInfoTable ERROR_INFO = new ErrorInfoTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ErrorInfoRecord> getRecordType() {
        return ErrorInfoRecord.class;
    }

    /**
     * The column <code>cloudins_apm.error_info.trace_id</code>. coincides with zipkin_spans.trace_id
     */
    public final TableField<ErrorInfoRecord, Long> TRACE_ID = createField("trace_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "coincides with zipkin_spans.trace_id");

    /**
     * The column <code>cloudins_apm.error_info.span_id</code>. coincides with zipkin_spans.id
     */
    public final TableField<ErrorInfoRecord, Long> SPAN_ID = createField("span_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "coincides with zipkin_spans.id");

    /**
     * The column <code>cloudins_apm.error_info.a_key</code>. BinaryAnnotation.key or Annotation.value if type == -1
     */
    public final TableField<ErrorInfoRecord, String> A_KEY = createField("a_key", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "BinaryAnnotation.key or Annotation.value if type == -1");

    /**
     * The column <code>cloudins_apm.error_info.a_value</code>. BinaryAnnotation.value(), which must be smaller than 64KB
     */
    public final TableField<ErrorInfoRecord, byte[]> A_VALUE = createField("a_value", org.jooq.impl.SQLDataType.BLOB, this, "BinaryAnnotation.value(), which must be smaller than 64KB");

    /**
     * The column <code>cloudins_apm.error_info.a_timestamp</code>. Used to implement TTL; Annotation.timestamp or zipkin_spans.timestamp
     */
    public final TableField<ErrorInfoRecord, Long> A_TIMESTAMP = createField("a_timestamp", org.jooq.impl.SQLDataType.BIGINT, this, "Used to implement TTL; Annotation.timestamp or zipkin_spans.timestamp");

    /**
     * The column <code>cloudins_apm.error_info.endpoint_service_name</code>. Null when Binary/Annotation.endpoint is null
     */
    public final TableField<ErrorInfoRecord, String> ENDPOINT_SERVICE_NAME = createField("endpoint_service_name", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "Null when Binary/Annotation.endpoint is null");

    /**
     * Create a <code>cloudins_apm.error_info</code> table reference
     */
    public ErrorInfoTable() {
        this("error_info", null);
    }

    /**
     * Create an aliased <code>cloudins_apm.error_info</code> table reference
     */
    public ErrorInfoTable(String alias) {
        this(alias, ERROR_INFO);
    }

    private ErrorInfoTable(String alias, Table<ErrorInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private ErrorInfoTable(String alias, Table<ErrorInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return CloudinsApm.CLOUDINS_APM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ErrorInfoRecord> getPrimaryKey() {
        return Keys.KEY_ERROR_INFO_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ErrorInfoRecord>> getKeys() {
        return Arrays.<UniqueKey<ErrorInfoRecord>>asList(Keys.KEY_ERROR_INFO_PRIMARY, Keys.KEY_ERROR_INFO_TRACE_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ErrorInfoTable as(String alias) {
        return new ErrorInfoTable(alias, this);
    }

    /**
     * Rename this table
     */
    public ErrorInfoTable rename(String name) {
        return new ErrorInfoTable(name, null);
    }
}
